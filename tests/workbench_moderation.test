<?php

/**
 * @file
 * Tests for node.module.
 */

class WorkbenchModerationTestCase extends DrupalWebTestCase {
  protected $content_type;
  protected $moderator_user;

  function setUp() {
    parent::setUp('workbench_moderation');

    // Create a new content type and enable moderation on it.
    $type = $this->drupalCreateContentType();
    $this->content_type = $type->name;
    variable_set('node_options_' . $this->content_type, array('revision', 'moderation'));

    // Create and login user.
    $this->moderator_user = $this->drupalCreateUser(array(
      'access content',
      'view revisions',
      'view all unpublished content',
      'view moderation history',
      'view moderation messages',
      'bypass workbench moderation',
      "create {$this->content_type} content",
      "edit any {$this->content_type} content",
    ));
    $this->admin_user = $this->drupalCreateUser(array(
      'bypass node access',
      'administer nodes',
      'view revisions',
      'view all unpublished content',
      'view moderation history',
      'view moderation messages',
      'bypass workbench moderation',
      "create {$this->content_type} content",
    ));
  }

}

class WorkbenchModerationModerateTabTestCase extends WorkbenchModerationTestCase {

  public static function getInfo() {
    return array(
      'name' => '"Moderate" tab',
      'description' => 'Create a moderated node publish it using the "Moderate" tab.',
      'group' => 'Workbench Moderation',
    );
  }

  function testPublishFromModerateTab() {
    $this->drupalLogin($this->moderator_user);

    $is_moderated = workbench_moderation_node_type_moderated($this->content_type);
    $this->assertTrue($is_moderated, t('The content type is moderated.'));

    // Create a new node and make sure it is unpublished.
    $body_name = 'body[' . LANGUAGE_NONE . '][0]';
    $edit = array(
      'title' => $this->randomName(),
      "{$body_name}[value]" => $this->randomString(128),
      "{$body_name}[format]" => filter_default_format(),
    );
    $this->drupalPost("node/add/{$this->content_type}", $edit, t('Save'));

    // Get the new node.
    $node = $this->drupalGetNodeByTitle($edit['title']);

    $this->assertFalse($node->status, t('New node is unpublished'));
    $this->assertTrue(isset($node->workbench_moderation), t('Workbench moderation information is present on the node object'));
    $this->assertFalse(isset($node->workbench_moderation['published']), t('Workbench moderation has no published revision'));

    // Make sure the "Moderate" tab is accessible.
    $this->drupalGet("node/{$node->nid}/moderation");

    // Publish the node via the moderation form.
    $moderate = array('state' => workbench_moderation_state_published());
    $this->drupalPost("node/{$node->nid}/moderation", $moderate, t('Apply'));

    $node = node_load($node->nid, NULL, TRUE);
    $this->assertTrue(isset($node->workbench_moderation['published']), t('Workbench moderation has a published revision'));

    // Create a new draft.
    $new_title = $this->randomName(10) . '_revision1';
    $edit = array('title' => $new_title);
    $this->drupalPost("node/{$node->nid}/edit", $edit, t('Save'));

    // Load the published and draft revisions.
    $published = node_load($node->nid, NULL, TRUE);
    $draft = clone $published;
    $draft = workbench_moderation_node_current_load($draft);

    $this->assertEqual($published->vid, $published->workbench_moderation['published']->vid, t('Published revision is loaded by default'));
    $this->assertTrue($published->status, t('Published revision has status = 1'));
    $this->assertNotEqual($published->vid, $draft->vid, t('Draft revision is different from the published revision'));
  }

}

class WorkbenchModerationPublishFromNodeFormTestCase extends WorkbenchModerationTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Publish from node form',
      'description' => 'Publish a moderated node from the node form.',
      'group' => 'Workbench Moderation',
    );
  }

  function testPublishFromNodeForm() {
    $this->drupalLogin($this->admin_user);

    // Create a new node and publish it immediately.
    $body_name = 'body[' . LANGUAGE_NONE . '][0]';
    $edit = array(
      'title' => $this->randomName(),
      "{$body_name}[value]" => $this->randomString(128),
      "{$body_name}[format]" => filter_default_format(),
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
    );
    $this->drupalPost("node/add/{$this->content_type}", $edit, t('Save'));

    // Get the new node and make sure it is published.
    $node = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue(isset($node->workbench_moderation['published']), t('Workbench moderation has a published revision'));
    $this->assertEqual($node->vid, $node->workbench_moderation['published']->vid, t('Published revision is loaded by default'));
    $this->assertTrue($node->status, t('Published revision has status = 1'));

    // Test anonymous access to the published content.
    $this->drupalLogout();
    $this->drupalGet("node/{$node->nid}");
    $this->assertText($edit['title'], t('Anonymous users can access the published content'));
  }

}
