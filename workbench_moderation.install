<?php

/**
 * @file
 * Install file for the Workbench Moderation module.
 */

/**
 * Implements hook_install().
 */
function workbench_moderation_install() {
  // Create tables.
  _workbench_moderation_insert_values();
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'workbench_moderation')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function workbench_moderation_schema() {
  $schema['workbench_moderation_states'] = array(
    'description' => 'Defines all possible states',
    'fields' => array(
      'name' => array(
        'description' => 'The name of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A description of the moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Sort weight for the moderation state.',
        'type' => 'int',
        'default' => 0,
      ),
    ),
    'unique keys' => array('name' => array('name'))
  );

  $schema['workbench_moderation_node_history'] = array(
    'fields' => array(
      'hid' => array(
        'description' => 'Node history entry key.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'vid' => array(
        'description' => 'Node revision id. Foreign key to {node_revision}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'nid' => array(
        'description' => 'Node id. Foreign key to {node}',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'from_state' => array(
        'description' => 'The old moderation state of the node',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'state' => array(
        'description' => 'The current moderation state of the node.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The user id of the moderator who made the change. Foreign key to {users}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'stamp' => array(
        'description' => 'The timestamp of the change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'published' => array(
        'description' => 'Indicated the live revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'current' => array(
        'description' => 'Indicated the current revision of a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid' => array('nid'),
      'vid' => array('vid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node_revision' => 'vid'),
      'uid' => array('users' => 'uid'),
    ),
  );

  $schema['workbench_moderation_transitions'] = array(
    'description' => 'Defines the valid transitions for states',
    'fields' => array(
      'from_name' => array(
        'description' => 'The starting moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'to_name' => array(
        'description' => 'The ending moderation state.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
  );

  return $schema;
}

/**
 * Adds default data for workflow states
 */
function _workbench_moderation_insert_values() {
  $states[] = array(
    'name' => workbench_moderation_state_none(),
    'description' => '"Draft" content is visible only to its author.',
  );

  $states[] = array(
    'name' => 'Needs Review',
    'description' => '"Needs Review" content is brought to the attention administrators and editors who may then publish it.',
  );

  $states[] = array(
    'name' => workbench_moderation_state_published(),
    'description' => '"Published" content is visible to the world.',
  );

  $weight = 0;
  foreach ($states as $state) {
    db_insert('workbench_moderation_states')
      ->fields(array(
          'name' => $state['name'],
          'description' => $state['description'],
          'weight' => $weight++,
      ))
      ->execute();
  }

  // Transitions.
  $transitions[] = array(workbench_moderation_state_none(), ' Needs Review');
  $transitions[] = array('Needs Review', workbench_moderation_state_published());
  $transitions[] = array(workbench_moderation_state_published(), 'Needs Review');
  foreach ($transitions as $transition) {
    db_insert('workbench_moderation_transitions')
      ->fields(array(
          'from_name' => $transition[0],
          'to_name' => $transition[1],
      ))
      ->execute();
  }
}

/**
 * Update the 'weight' field on {workbench_moderation_states}.
 *
 * Accept standard Drupal weight values.
 */
function workbench_moderation_update_7001() {
  db_change_field('workbench_moderation_states', 'weight', 'weight', array(
    'description' => 'Sort weight for the moderation state.',
    'type' => 'int',
    'default' => 0,
  ));

  return t('Updated the weight field on the moderation states table.');
}

/**
 * Drop the unused 'ntypes' field from workbench_moderation_transitions.
 */
function workbench_moderation_update_7002() {
  db_drop_field('workbench_moderation_transitions', 'ntype');
  return t('Dropped unused field from the moderation transitions table.');
}

/**
 * Use "revision" instead of "version" when referring to node revisions.
 */
function workbench_moderation_update_7003() {
  $old_permission = 'unpublish live version';
  $new_permission = 'unpublish live revision';

  // Which roles have the old permission?
  $roles = db_select('role_permission', 'role_permission')
    ->condition('permission', $old_permission)
    ->condition('module', 'workbench_moderation')
    ->fields('role_permission', array('rid'))
    ->execute()
    ->fetchCol();

  // Grant these roles the new permission.
  foreach ($roles as $rid) {
    user_role_grant_permissions($rid, array($new_permission));
  }

  // Delete all grants of the old permission.
  db_delete('role_permission')
    ->condition('permission', $old_permission)
    ->condition('module', 'workbench_moderation')
    ->execute();

  return t('The renamed permission was updated for !count roles.', array('!count' => count($roles)));
}

/**
 * Use "Published" instead of "Publish" and "Needs Review" instead of "Review" for state names.
 */
function workbench_moderation_update_7004() {

  // Update workbench_moderation_states
  db_update('workbench_moderation_states')
    ->fields(array(
      'Name' => 'Needs Review',
      'description' => '"Needs Review" content is brought to the attention administrators and editors who may then publish it.',
    ))
    ->condition('Name', 'Review', '=')
    ->execute();

  db_update('workbench_moderation_states')
    ->fields(array(
      'Name' => workbench_moderation_state_published(),
      'description' => '"Published" content is visible to the world.',
    ))
    ->condition('Name', 'Publish', '=')
    ->execute();


  // Update workbench_moderation_transitions
  db_update('workbench_moderation_transitions')
    ->fields(array(
      'from_name' => 'Needs Review',
    ))
    ->condition('from_name', 'Review', '=')
    ->execute();

  db_update('workbench_moderation_transitions')
    ->fields(array(
      'to_name' => 'Needs Review',
    ))
    ->condition('to_name', 'Review', '=')
    ->execute();

  db_update('workbench_moderation_transitions')
    ->fields(array(
      'from_name' => workbench_moderation_state_published(),
    ))
    ->condition('from_name', 'Publish', '=')
    ->execute();

  db_update('workbench_moderation_transitions')
    ->fields(array(
      'to_name' => workbench_moderation_state_published(),
    ))
    ->condition('to_name', 'Publish', '=')
    ->execute();


  // Update workbench_moderation_node_history
  db_update('workbench_moderation_node_history')
    ->fields(array(
      'from_state' => 'Needs Review',
    ))
    ->condition('from_state', 'Review', '=')
    ->execute();

  db_update('workbench_moderation_node_history')
    ->fields(array(
      'state' => 'Needs Review',
    ))
    ->condition('state', 'Review', '=')
    ->execute();

  db_update('workbench_moderation_node_history')
    ->fields(array(
      'from_state' => workbench_moderation_state_published(),
    ))
    ->condition('from_state', 'Publish', '=')
    ->execute();

  db_update('workbench_moderation_node_history')
    ->fields(array(
      'state' => workbench_moderation_state_published(),
    ))
    ->condition('state', 'Publish', '=')
    ->execute();

}
